{"pageProps":{"article":{"id":273,"documentId":"r7kw0wbuvv697hh5u5cbvsw3","title":"【データモデリング】論理テーブル設計のチュートリアル","content":"データモデリングにおいて、エンティティ抽出とER図の作成が完了したら、次のステップとして論理テーブル設計を行います。本記事では、ECサイトを題材にして論理テーブル設計の手順を詳しく解説します。\n\n## 1. シナリオの確認\n\nECサイトにおける主要な機能を整理します。\n\n- **商品一覧の表示**\n- **カートへの追加・削除**\n- **注文処理**\n- **決済処理**\n\nこの機能をもとに、エンティティ抽出とER図を作成しました。これを基に論理テーブル設計を進めます。\n\n## 2. 論理テーブル設計の手順\n\n### 2.1 テーブル定義（エンティティ → テーブル化）\n\nエンティティをそのままテーブルとして定義し、データの構造を明確にします。多対多の関係がある場合は、中間テーブルを作成します。\n\n### 2.2 主キー・外部キー・制約の設定\n\n- **主キー（Primary Key, PK）**\n    - サロゲートキー（自動採番IDなど）またはナチュラルキー（業務上意味を持つID）を選択\n- **外部キー（Foreign Key, FK）**\n    - リレーションの参照整合性を担保\n- **制約（Constraints）**\n    - `UNIQUE`, `CHECK`, `NOT NULL` などの制約を適用\n\n### 2.3 正規化の徹底と非正規化判断\n\n- 基本は **第3正規形**（3NF）を適用\n- **性能要件** に応じて部分的に非正規化\n- **正規化のステップ**\n    - **第1正規形（1NF）**: 繰り返し要素を排除し、各列に単一値のみを格納\n    - **第2正規形（2NF）**: 1NFを満たし、部分関数従属を排除（主キーに完全依存する）\n    - **第3正規形（3NF）**: 2NFを満たし、推移的関数従属を排除（主キー以外の列が他の非キー属性に依存しない）\n\n### 2.4 論理レベルでのデータ型選定\n\n- 製品依存を避け、抽象的なデータ型を選択\n    - `VARCHAR`, `INTEGER`, `DATE`, `DECIMAL` など\n\n## 3. 論理テーブル定義の例\n\n### 3.1 User（ユーザー）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| user_id | INTEGER | PK, 自動採番 | ユーザーの一意識別子 |\n| username | VARCHAR(255) | NOT NULL | ユーザー名 |\n| email | VARCHAR(255) | UNIQUE, NOT NULL | メールアドレス（ナチュラルキー） |\n| password | VARCHAR(255) | NOT NULL | パスワード |\n\n### 3.2 Product（商品）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| product_id | INTEGER | PK, 自動採番 | 商品の一意識別子 |\n| product_code | VARCHAR(100) | UNIQUE, NOT NULL | 商品コード（ナチュラルキー） |\n| name | VARCHAR(255) | NOT NULL | 商品名 |\n| price | DECIMAL(10,2) | NOT NULL | 価格 |\n| stock | INTEGER | NOT NULL | 在庫数 |\n\n### 3.3 Cart（カート）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| cart_id | INTEGER | PK, 自動採番 | カートの一意識別子 |\n| user_id | INTEGER | FK (User) | カート所有者 |\n| created_at | DATE | NOT NULL | カート作成日時 |\n\n### 3.4 CartItem（カート内商品）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| cart_id | INTEGER | PK, FK (Cart) | カートの識別子 |\n| product_id | INTEGER | PK, FK (Product) | カート内の商品 |\n| quantity | INTEGER | NOT NULL | 商品の個数 |\n\n### 3.5 Order（注文）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| order_id | INTEGER | PK, 自動採番 | 注文の一意識別子 |\n| user_id | INTEGER | FK (User) | 注文したユーザー |\n| total_price | DECIMAL(10,2) | NOT NULL | 合計金額 |\n| status | VARCHAR(50) | NOT NULL | 注文ステータス（例: 確定, 発送済み） |\n| order_date | DATE | NOT NULL | 注文日時 |\n\n### 3.6 OrderItem（注文内商品）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| order_id | INTEGER | PK, FK (Order) | 注文の識別子 |\n| product_id | INTEGER | PK, FK (Product) | 注文内の商品 |\n| quantity | INTEGER | NOT NULL | 商品の個数 |\n\n### 3.7 Payment（決済）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| payment_id | INTEGER | PK, 自動採番 | 決済の一意識別子 |\n| order_id | INTEGER | FK (Order) | 関連する注文 |\n| method | VARCHAR(50) | NOT NULL | 決済方法（クレジットカード, 銀行振込など） |\n| status | VARCHAR(50) | NOT NULL | 決済ステータス（成功, 失敗など） |\n| payment_date | DATE | NOT NULL | 決済日時 |\n\n## 3. 論理テーブル設計後のER図\n\n以下のER図は、論理テーブル設計を反映したものです。\n\n```mermaid\nerDiagram\n  User {\n    INTEGER user_id\n    VARCHAR username\n    VARCHAR email\n    VARCHAR password\n  }\n  Product {\n    INTEGER product_id\n    VARCHAR product_code\n    VARCHAR name\n    DECIMAL price\n    INTEGER stock\n  }\n  Cart {\n    INTEGER cart_id\n    INTEGER user_id\n    DATE created_at\n  }\n  CartItem {\n    INTEGER cart_id\n    INTEGER product_id\n    INTEGER quantity\n  }\n  Order {\n    INTEGER order_id\n    INTEGER user_id\n    DECIMAL total_price\n    VARCHAR status\n    DATE order_date\n  }\n  OrderItem {\n    INTEGER order_id\n    INTEGER product_id\n    INTEGER quantity\n  }\n  Payment {\n    INTEGER payment_id\n    INTEGER order_id\n    VARCHAR method\n    VARCHAR status\n    DATE payment_date\n  }\n\n  User ||--o{ Cart : owns\n  User ||--o{ Order : places\n  Cart ||--o{ CartItem : contains\n  CartItem ||--|| Product : includes\n  Order ||--o{ OrderItem : contains\n  OrderItem ||--|| Product : includes\n  Order ||--o{ Payment : processes\n```\n\n## 4. まとめ\n\n本記事では、ECサイトを題材に論理テーブル設計の手順を解説しました。\n\n1. エンティティをテーブル化し、リレーションを定義\n2. 主キー・外部キー・制約を適切に設定\n3. 第3正規形を基本にしつつ、性能要件に応じて非正規化を検討\n4. 正規化の基本概念（1NF, 2NF, 3NF）を説明\n5. 抽象的なデータ型を選定し、製品依存を避ける\n6. ER図で論理テーブルの構造を視覚化\n\nこの設計をもとに、次は物理データベース設計を進め、最適なインデックスやパーティショニングの適用を検討していきましょう！\n\n---\n\n","createdAt":"2025-05-19T08:50:58.558Z","updatedAt":"2025-06-06T00:02:21.907Z","publishedAt":"2025-06-06T00:02:21.915Z","docId":"and3z1mk64o9z87wvqv7t3u4","tags":[{"id":6,"documentId":"bnetm5oe2jokv3u2ib1nibia","createdAt":"2025-05-19T09:45:00.761Z","updatedAt":"2025-05-19T09:45:00.761Z","publishedAt":"2025-05-19T09:45:00.769Z","name":"Database"},{"id":4,"documentId":"zc573y83cxbfql2umdwbhot9","createdAt":"2025-05-19T09:44:33.028Z","updatedAt":"2025-05-19T09:44:33.028Z","publishedAt":"2025-05-19T09:44:33.035Z","name":"Tutorial"}],"thumbnail":[{"id":29,"documentId":"hzayd21g8ituh08aqguk86f0","name":"20250513-25.png","alternativeText":null,"caption":null,"width":1503,"height":844,"formats":{"thumbnail":{"name":"thumbnail_20250513-25.png","hash":"thumbnail_20250513_25_68f5cc6f84","ext":".png","mime":"image/png","path":null,"width":245,"height":138,"size":12.73,"sizeInBytes":12733,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/thumbnail_20250513_25_68f5cc6f84.png"},"medium":{"name":"medium_20250513-25.png","hash":"medium_20250513_25_68f5cc6f84","ext":".png","mime":"image/png","path":null,"width":750,"height":421,"size":47.88,"sizeInBytes":47876,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/medium_20250513_25_68f5cc6f84.png"},"small":{"name":"small_20250513-25.png","hash":"small_20250513_25_68f5cc6f84","ext":".png","mime":"image/png","path":null,"width":500,"height":281,"size":28.81,"sizeInBytes":28809,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/small_20250513_25_68f5cc6f84.png"},"large":{"name":"large_20250513-25.png","hash":"large_20250513_25_68f5cc6f84","ext":".png","mime":"image/png","path":null,"width":1000,"height":562,"size":65.65,"sizeInBytes":65654,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/large_20250513_25_68f5cc6f84.png"}},"hash":"20250513_25_68f5cc6f84","ext":".png","mime":"image/png","size":19.21,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/20250513_25_68f5cc6f84.png","previewUrl":null,"provider":"@strapi/provider-upload-aws-s3","provider_metadata":null,"createdAt":"2025-05-20T07:54:49.087Z","updatedAt":"2025-05-20T07:54:49.087Z","publishedAt":"2025-05-20T07:54:49.088Z"}]}},"__N_SSG":true}