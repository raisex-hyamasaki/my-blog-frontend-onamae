{"pageProps":{"article":{"id":270,"documentId":"y39dt5uhrmpjlphirb3u5vhb","title":"Docker Compose超入門 初心者でもすぐに使える基礎ガイド","content":"Dockerを使うとアプリの環境を簡単に構築出来ますが、複数のコンテナを扱う場合、コマンドが増えて面倒になることがあります。そんなときに役立つのが **Docker Compose** です！\n\n本記事では、Docker Composeの基本から、よく使うコマンド、実際にNginxとExpress.jsを組み合わせたアプリの作成まで、ステップバイステップで解説します。\n\n---\n\n## 1. 事前準備：DockerとDocker Composeのインストール\n\nDocker Composeを使用するには、まず **Docker Desktop** をインストールする必要があります。\n\n### **Dockerのインストール**\n\n公式サイトからDockerをインストールします。\n\n🔗 [Docker公式サイト](https://www.docker.com/products/docker-desktop/)\n\n---\n\n## 2. `docker-compose.yml` を作成してみよう\n\nまずは簡単な `docker-compose.yml` を作成し、コンテナを管理する方法を学びましょう。\n\n### **1つのサービスを定義**\n\n以下のYAMLファイルを作成し、nginxのWebサーバーを動かしてみます。\n\n```yaml\nversion: '3'\n\nservices:\n  web:\n    image: nginx\n    ports:\n      - \"80:80\"\n\n```\n\nこの例では `web` がサービス名になります。\n\n### **起動**\n\n作成したファイルがあるディレクトリで、以下のコマンドを実行します。\n\n```bash\ndocker-compose up -d\n```\n\n- `-d` はバックグラウンド実行のオプション\n- ブラウザで `http://localhost` にアクセスすると、Nginxのデフォルトページが表示されます。\n\n### **終了**\n\n```bash\ndocker-compose down\n```\n\nこれでコンテナは停止・削除されます。\n\n---\n\n## 3. Docker Composeのよく使うコマンド\n\nDocker Composeを使うと、複数のコンテナを一括で管理できます。ここでは、よく使うコマンドを順番に紹介します。\n\n### ① コンテナを起動\n\n```bash\ndocker compose up\n```\n\n`docker compose up` を実行すると、`docker-compose.yml` に記載されたサービス（コンテナ）が起動します。\n\n### ② バックグラウンドで起動\n\n```bash\ndocker compose up -d\n```\n\n- `-d` をつけるとバックグラウンドで起動し、ターミナルを占有しません。\n\n### ③ 特定のサービスのみ起動\n\n```bash\ndocker compose up サービス名\n```\n\n`docker-compose.yml` に定義されている特定のサービスだけを起動したい場合は、サービス名を指定します。\n\n### ④ コンテナを停止＆削除\n\n```bash\ndocker compose down\n```\n\n起動したコンテナを停止し、削除します。ネットワークも削除されるため、完全にクリーンな状態に戻したいときに便利です。\n\n### ⑤ コンテナを停止\n\n```bash\ndocker compose stop\n```\n\n実行中のコンテナを停止します。ただし、コンテナ自体は削除されないため、後で `docker compose start` で再開できます。\n\n### ⑥ 停止したコンテナを再開\n\n```bash\ndocker compose start\n```\n\n`docker compose stop` で停止したコンテナを再び起動します。\n\n### ⑦ コンテナを再起動\n\n```bash\ndocker compose restart\n```\n\nコンテナを再起動したいときに使います。設定を変更した場合などに便利です。\n\n### ⑧ 実行中のコンテナを確認\n\n```bash\ndocker compose ps\n```\n\n現在動作しているコンテナの状態を一覧表示します。\n\n### ⑨ コンテナのログを表示\n\n```bash\ndocker compose logs\n```\n\nコンテナの標準出力（ログ）を確認できます。\n\nリアルタイムでログを追いたい場合は `-f` をつけます。\n\n```bash\ndocker compose logs -f\n```\n\n### ⑩ 特定のサービスのコンテナを削除\n\n```bash\ndocker compose rm -fsv サービス名\n```\n\n特定のサービスのみを削除するときに使用します。\n\nオプションの意味：\n\n- `-f` 強制削除\n- `-s` ボリュームも削除\n- `-v` 名前付きボリュームも削除\n\nこれらのコマンドを覚えておけば、Docker Composeをスムーズに扱えるようになります！\n\n---\n\n## 4. NginxとExpress.jsを組み合わせたアプリを作成\n\nここからは、カスタムの `Dockerfile` と `docker-compose.yml` を作成し、 **NginxとExpress.jsを使ったHello Worldアプリ** を実装します。\n\n### **ディレクトリ構成**\n\n```bash\nmyapp/\n│── docker-compose.yml\n│── nginx/\n│   └── default.conf\n└── app/\n    ├── Dockerfile\n    ├── package.json\n    ├── server.js\n```\n\n### **1. Express.jsの準備**\n\nまず、`app/` ディレクトリを作成し、その中に `package.json` を用意します。\n\n```json\n{\n  \"name\": \"docker-express\",\n  \"version\": \"1.0.0\",\n  \"main\": \"server.js\",\n  \"dependencies\": {\n    \"express\": \"^4.17.1\"\n  }\n}\n\n```\n\n次に、`server.js` を作成します。\n\n```jsx\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello, World from Express.js!');\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n\n```\n\n### **2. Express.jsのDockerfile**\n\n次に、`app/` ディレクトリ内に `Dockerfile` を作成します。\n\n```docker\nFROM node:14\nWORKDIR /app\nCOPY package.json ./\nRUN npm install\nCOPY . .\nCMD [\"node\", \"server.js\"]\nEXPOSE 3000\n\n```\n\n### **3. Nginxの設定**\n\nNginxをリバースプロキシとして動作させます。`nginx/` ディレクトリを作成し、`default.conf` を追加します。\n\n```\nserver {\n    listen 80;\n\n    location / {\n        proxy_pass http://app:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n\n### **4. `docker-compose.yml` を作成**\n\n最後に `docker-compose.yml` をルートディレクトリに作成します。\n\n```yaml\nversion: '3'\n\nservices:\n  app:\n    build: ./app\n    ports:\n      - \"3000:3000\"\n\n  web:\n    image: nginx\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf\n    depends_on:\n      - app\n\n```\n\n### **5. コンテナの起動**\n\n```bash\ndocker-compose up -d\n```\n\n- `http://localhost` にアクセスすると `Hello, World from Express.js!` が表示されます。\n\n---\n\n## まとめ\n\n今回は **Docker Composeの基本** から **Nginx + Express.jsのWebアプリ** を作るところまで解説しました。\n\n### **学んだポイント**\n\n✅ Docker Composeの基本的なコマンド\n\n✅ `docker-compose.yml` の書き方\n\n✅ カスタム `Dockerfile` の作成\n\n✅ NginxとExpress.jsの連携\n\nDocker Composeを使えば、 **複数のコンテナを簡単に管理できる** ようになります。ぜひ試してみてくださいね。 🚀\n\n---\n","createdAt":"2025-05-19T08:50:58.441Z","updatedAt":"2025-06-06T00:01:42.686Z","publishedAt":"2025-06-06T00:01:42.698Z","docId":"y20328g93lc4hx15m7vjn3y4","tags":[{"id":2,"documentId":"zigqvzb0flgfexglvu0rhcai","createdAt":"2025-05-19T09:42:02.161Z","updatedAt":"2025-05-19T09:42:02.161Z","publishedAt":"2025-05-19T09:42:02.189Z","name":"Docker"}],"thumbnail":[{"id":27,"documentId":"w4z64z3qufa17y4cdia6jgyl","name":"20250513-23.png","alternativeText":null,"caption":null,"width":1503,"height":844,"formats":{"thumbnail":{"name":"thumbnail_20250513-23.png","hash":"thumbnail_20250513_23_99f792de40","ext":".png","mime":"image/png","path":null,"width":245,"height":138,"size":16.1,"sizeInBytes":16098,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/thumbnail_20250513_23_99f792de40.png"},"small":{"name":"small_20250513-23.png","hash":"small_20250513_23_99f792de40","ext":".png","mime":"image/png","path":null,"width":500,"height":281,"size":40.24,"sizeInBytes":40241,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/small_20250513_23_99f792de40.png"},"large":{"name":"large_20250513-23.png","hash":"large_20250513_23_99f792de40","ext":".png","mime":"image/png","path":null,"width":1000,"height":562,"size":92.78,"sizeInBytes":92775,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/large_20250513_23_99f792de40.png"},"medium":{"name":"medium_20250513-23.png","hash":"medium_20250513_23_99f792de40","ext":".png","mime":"image/png","path":null,"width":750,"height":421,"size":66.8,"sizeInBytes":66801,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/medium_20250513_23_99f792de40.png"}},"hash":"20250513_23_99f792de40","ext":".png","mime":"image/png","size":24.66,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/20250513_23_99f792de40.png","previewUrl":null,"provider":"@strapi/provider-upload-aws-s3","provider_metadata":null,"createdAt":"2025-05-20T07:54:09.951Z","updatedAt":"2025-05-20T07:54:09.951Z","publishedAt":"2025-05-20T07:54:09.952Z"}]}},"__N_SSG":true}