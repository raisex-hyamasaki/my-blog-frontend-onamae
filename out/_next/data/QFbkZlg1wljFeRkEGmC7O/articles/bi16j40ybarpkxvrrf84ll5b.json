{"pageProps":{"article":{"id":274,"documentId":"bi16j40ybarpkxvrrf84ll5b","title":"【データモデリング】物理テーブル設計のチュートリアル","content":"データモデリングにおいて、論理テーブル設計が完了したら、次のステップとして物理テーブル設計を行います。本記事では、ECサイトを題材にして、MySQL を使用した物理テーブル設計の手順を詳しく解説します。\n\n## 1. シナリオの確認\n\nECサイトにおける主要な機能を整理します。\n\n- **商品一覧の表示**\n- **カートへの追加・削除**\n- **注文処理**\n- **決済処理**\n\nこの機能をもとに、エンティティ抽出とER図を作成し、論理テーブル設計を行いました。これを基に物理テーブル設計を進めます。\n\n## 2. 物理テーブル設計の考慮点\n\n物理テーブル設計では、以下の観点を考慮して実装を進めます。\n\n### 2.1 DB 製品特性・インフラ要件\n\n- **データベースの種類**\n    - MySQL, PostgreSQL, Oracle, SQL Server など、製品ごとに特性や制限が異なる。\n    - 本記事では MySQL を前提とする。\n- **インフラ環境の違い**\n    - オンプレミスかクラウド（AWS RDS, GCP Cloud SQL など）かで運用が異なる。\n    - クラウド環境では、自動バックアップやスケーリング機能を考慮。\n\n### 2.2 具体的なデータ型マッピング（MySQL）\n\n| 論理データ型 | MySQL データ型 | 説明 |\n| --- | --- | --- |\n| VARCHAR | VARCHAR(n) | 文字列（可変長） |\n| INTEGER | INT | 整数 |\n| DECIMAL | DECIMAL(p,s) | 小数点を含む数値 |\n| DATE | DATE | 日付 |\n| DATETIME | DATETIME | 日時 |\n| BOOLEAN | TINYINT(1) | 真偽値（MySQL では TINYINT を使用） |\n\n### 2.3 インデックス設計\n\n- **主キー（Primary Key, PK）**: `AUTO_INCREMENT` を設定して一意性を担保。\n- **外部キー（Foreign Key, FK）**: `ON DELETE CASCADE` などの制約を検討。\n- **検索性能向上のためのインデックス**\n    - よく検索されるカラムに `INDEX` を設定。\n    - `ORDER BY` でよく使用されるカラムには `BTREE` インデックスを検討。\n    - 複数の検索条件を考慮して `複合インデックス` を適用。\n\n### 2.4 パーティショニング / シャーディング\n\n- **パーティショニング**: 大量のデータを保持するテーブルは `RANGE PARTITION` や `LIST PARTITION` を適用。\n- **シャーディング**: ユーザー数が多い場合、`user_id` を基準に水平分割を検討。\n\n### 2.5 可用性・セキュリティ・運用設計\n\n- **レプリケーション / クラスタリング**\n    - MySQL の `Master-Slave` レプリケーションを設定し、読み込み負荷を分散。\n- **ユーザ権限**\n    - `GRANT SELECT, INSERT, UPDATE ON database.* TO 'app_user'@'%' IDENTIFIED BY 'password';`\n- **バックアップ / 監査ログ**\n    - `mysqldump` による定期バックアップ。\n    - `binlog` を有効化し、データ変更履歴を保持。\n\n## 3. 物理テーブル定義の例\n\n### 3.1 User（ユーザー）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| user_id | INT | PK, AUTO_INCREMENT | ユーザーの一意識別子 |\n| username | VARCHAR(255) | NOT NULL | ユーザー名 |\n| email | VARCHAR(255) | UNIQUE, NOT NULL | メールアドレス（ナチュラルキー） |\n| password | VARCHAR(255) | NOT NULL | パスワード |\n| created_at | DATETIME | DEFAULT CURRENT_TIMESTAMP | 作成日時 |\n\n### 3.2 Product（商品）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| product_id | INT | PK, AUTO_INCREMENT | 商品の一意識別子 |\n| product_code | VARCHAR(100) | UNIQUE, NOT NULL | 商品コード（ナチュラルキー） |\n| name | VARCHAR(255) | INDEX, NOT NULL | 商品名 |\n| price | DECIMAL(10,2) | NOT NULL | 価格 |\n| stock | INT | NOT NULL | 在庫数 |\n| created_at | DATETIME | DEFAULT CURRENT_TIMESTAMP | 作成日時 |\n\n### 3.3 Cart（カート）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| cart_id | INT | PK, AUTO_INCREMENT | カートの一意識別子 |\n| user_id | INT | FK (User), NOT NULL | カート所有者 |\n| created_at | DATETIME | DEFAULT CURRENT_TIMESTAMP | カート作成日時 |\n\n### 3.4 CartItem（カート内商品）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| cart_id | INT | PK, FK (Cart) | カートの識別子 |\n| product_id | INT | PK, FK (Product) | カート内の商品 |\n| quantity | INT | NOT NULL | 商品の個数 |\n\n### 3.5 Order（注文）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| order_id | INT | PK, AUTO_INCREMENT | 注文の一意識別子 |\n| user_id | INT | FK (User) | 注文したユーザー |\n| total_price | DECIMAL(10,2) | NOT NULL | 合計金額 |\n| status | VARCHAR(50) | NOT NULL | 注文ステータス（例: 確定, 発送済み） |\n| order_date | DATETIME | DEFAULT CURRENT_TIMESTAMP | 注文日時 |\n\n### 3.6 OrderItem（注文内商品）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| order_id | INT | PK, FK (Order) | 注文の識別子 |\n| product_id | INT | PK, FK (Product) | 注文内の商品 |\n| quantity | INT | NOT NULL | 商品の個数 |\n\n### 3.7 Payment（決済）\n\n| カラム名 | データ型 | 制約 | 説明 |\n| --- | --- | --- | --- |\n| payment_id | INT | PK, AUTO_INCREMENT | 決済の一意識別子 |\n| order_id | INT | FK (Order) | 関連する注文 |\n| method | VARCHAR(50) | NOT NULL | 決済方法（クレジットカード, 銀行振込など） |\n| status | VARCHAR(50) | NOT NULL | 決済ステータス（成功, 失敗など） |\n| payment_date | DATETIME | DEFAULT CURRENT_TIMESTAMP | 決済日時 |\n\n※パーティショニング / シャーディング、可用性・セキュリティ・運用設計についてはこのチュートリアルでは設計しない。\n\n## 4. まとめ\n\n本記事では、ECサイトを題材に MySQL を使用した物理テーブル設計を行いました。\n\n1. **データベース製品特性とインフラ要件を考慮**\n2. **論理データ型を MySQL の物理データ型へマッピング**\n3. **インデックス設計、パーティショニング、シャーディングの適用**\n4. **可用性・セキュリティ・運用設計を考慮**\n5. **実際の物理テーブル設計の例を表形式で記述**\n\nこの設計をもとに、最適なクエリ設計やパフォーマンスチューニングを検討し、運用しやすいデータベースを構築しましょう。\n\n---\n\n","createdAt":"2025-05-19T08:50:58.615Z","updatedAt":"2025-06-06T00:02:34.723Z","publishedAt":"2025-06-06T00:02:34.733Z","docId":"uzddg99rmym7zm87wskoyg2c","tags":[{"id":6,"documentId":"bnetm5oe2jokv3u2ib1nibia","createdAt":"2025-05-19T09:45:00.761Z","updatedAt":"2025-05-19T09:45:00.761Z","publishedAt":"2025-05-19T09:45:00.769Z","name":"Database"},{"id":4,"documentId":"zc573y83cxbfql2umdwbhot9","createdAt":"2025-05-19T09:44:33.028Z","updatedAt":"2025-05-19T09:44:33.028Z","publishedAt":"2025-05-19T09:44:33.035Z","name":"Tutorial"},{"id":8,"documentId":"zj5hi5t7civny0jcsejcwiwu","createdAt":"2025-05-19T09:46:29.591Z","updatedAt":"2025-05-19T09:46:29.591Z","publishedAt":"2025-05-19T09:46:29.613Z","name":"設計"}],"thumbnail":[{"id":30,"documentId":"lkgkufihuisdv11tpkg2ep6p","name":"20250513-26.png","alternativeText":null,"caption":null,"width":1503,"height":844,"formats":{"thumbnail":{"name":"thumbnail_20250513-26.png","hash":"thumbnail_20250513_26_9537569757","ext":".png","mime":"image/png","path":null,"width":245,"height":138,"size":13.1,"sizeInBytes":13103,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/thumbnail_20250513_26_9537569757.png"},"medium":{"name":"medium_20250513-26.png","hash":"medium_20250513_26_9537569757","ext":".png","mime":"image/png","path":null,"width":750,"height":421,"size":49.87,"sizeInBytes":49866,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/medium_20250513_26_9537569757.png"},"small":{"name":"small_20250513-26.png","hash":"small_20250513_26_9537569757","ext":".png","mime":"image/png","path":null,"width":500,"height":281,"size":30.46,"sizeInBytes":30458,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/small_20250513_26_9537569757.png"},"large":{"name":"large_20250513-26.png","hash":"large_20250513_26_9537569757","ext":".png","mime":"image/png","path":null,"width":1000,"height":562,"size":69.25,"sizeInBytes":69253,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/large_20250513_26_9537569757.png"}},"hash":"20250513_26_9537569757","ext":".png","mime":"image/png","size":19.68,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/20250513_26_9537569757.png","previewUrl":null,"provider":"@strapi/provider-upload-aws-s3","provider_metadata":null,"createdAt":"2025-05-20T07:55:09.011Z","updatedAt":"2025-05-20T07:55:09.011Z","publishedAt":"2025-05-20T07:55:09.011Z"}]}},"__N_SSG":true}