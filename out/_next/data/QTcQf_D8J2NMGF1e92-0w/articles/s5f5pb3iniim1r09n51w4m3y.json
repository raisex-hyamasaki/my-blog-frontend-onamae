{"pageProps":{"article":{"id":215,"documentId":"s5f5pb3iniim1r09n51w4m3y","title":"Docker超入門 初心者でもすぐに使える基礎ガイド","content":"近年、開発環境の構築やアプリケーションのデプロイにおいて欠かせない技術となっている **Docker**。\n\n「名前は聞いたことがあるけど、なんだか難しそう…」と感じていませんか？\n\n実はDockerは、基本さえ押さえれば誰でもすぐに使いこなせる便利なツールです！\n\n本記事では、Dockerの **基本的な使い方** を「Hello World」から **簡単なWebサーバーの作成** まで、一歩ずつ学んでいきます。\n\n**さあ、Dockerの世界に一歩踏み出しましょう！**\n\n---\n\n## **1. 事前準備：Dockerをインストールしよう！**\n\nDockerを使うためには、まず **Docker Desktop** をインストールする必要があります。\n\n以下の公式サイトから、自分のOSに合ったものをダウンロードしましょう。\n\n🔗 [Docker公式サイト](https://www.docker.com/products/docker-desktop/)\n\n### **インストールの流れ**\n\n1. **Docker Desktop** をダウンロード  \n2. インストーラーを実行してインストール  \n3. インストール後、Docker Desktopを起動  \n4. ターミナル（またはコマンドプロンプト）を開いて、以下のコマンドを実行  \n\n正しくインストールされていれば、バージョン情報が表示されます。\n\n```bash\ndocker --version\n```\n\nこれで準備完了です！\n\nでは、早速 **Dockerの基本操作** を試してみましょう。\n\n---\n\n## **2. DockerでHello Worldを実行してみよう！**\n\nDockerの基本を学ぶ第一歩として、まずは「Hello World」を実行してみます。\n\n以下のコマンドを実行してみてください。\n\n```bash\ndocker run hello-world\n```\n\nこのコマンドを実行すると、以下のような動作が行われます。\n\nまず、`hello-world` というDockerイメージ（実行可能なアプリケーションのパッケージ）がダウンロードされます。\n\n次に、ダウンロードしたイメージからコンテナ（仮想環境）が作成されます。\n\nその後、`hello-world` コンテナが起動し、次のようなメッセージを表示します。\n\n```bash\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n```\n\nコンテナは自動的に終了します。\n\nこのメッセージが表示されたら、Dockerが正常に動作している証拠です！ 🎉\n\n---\n\n## **3. Dockerの基本的な操作**\n\nDockerを使う上で **頻繁に使う基本コマンド** を紹介します。\n\nどれも重要なので、実際に試しながら覚えていきましょう！\n\n### **① コンテナの作成 & 実行**\n\n```bash\ndocker run -d --name my-nginx -p 8080:80 nginx\n```\n\n- `-d` ：バックグラウンドで実行  \n- `--name my-nginx` ：コンテナに `my-nginx` という名前をつける  \n- `-p 8080:80` ：ホストの `8080` ポートをコンテナの `80` ポートにマッピング  \n- `nginx` ：使用するDockerイメージ（公式のNginx）\n\n### **② 実行中のコンテナを確認**\n\n```bash\ndocker ps\n```\n\n### **③ 停止 & 削除**\n\n```bash\ndocker stop my-nginx\ndocker rm my-nginx\n```\n\n### **④ ログの確認**\n\n```bash\ndocker logs my-nginx\n```\n\n### **⑤ 利用可能なDockerイメージを確認**\n\n```bash\ndocker images\n```\n\n### **⑥ 不要なDockerイメージを削除**\n\n```bash\ndocker rmi イメージID\n```\n\n👉 **すべての未使用イメージを一括削除：**\n\n```bash\ndocker image prune -a\n```\n\n### **⑦ Dockerイメージの作成**\n\n```bash\ndocker build -t my-nginx-image .\n```\n\n---\n\n## **4. 簡単なDockerfileを作ってみよう！**\n\n### **Nginxでindex.htmlを表示するDockerイメージを作成**\n\nDockerの **真骨頂** は、「一度環境を作れば、どこでも同じ環境を再現できること」。\n\nそこで、 **Nginxを使って簡単なWebサーバーを構築** し、自分だけのDockerイメージを作ってみましょう！\n\n### **① プロジェクトフォルダを作成**\n\n```bash\nmkdir my-nginx\ncd my-nginx\n```\n\n### **② index.html を作成**\n\n```html\n<h1>Welcome to my Nginx Server!</h1>\n```\n\n### **③ Dockerfile を作成**\n\n```docker\n# ベースイメージとしてNginxを使用\nFROM nginx:latest\n\n# 作成した index.html をNginxのデフォルトページとして配置\nCOPY index.html /usr/share/nginx/html/index.html\n\n# コンテナ起動時にNginxを実行\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n### **④ Dockerイメージをビルド**\n\n```bash\ndocker build -t my-nginx-image .\n```\n\n### **⑤ コンテナを起動**\n\n```bash\ndocker run -d --name my-nginx-container -p 8080:80 my-nginx-image\n```\n\n### **⑥ ブラウザで確認**\n\nWebブラウザで `http://localhost:8080` にアクセスし、  \n「**Welcome to my Nginx Server!**」と表示されれば成功です！ 🎉\n\n---\n\n## **5. まとめ：Dockerの基本をマスター！**\n\n✅ Dockerのインストール  \n✅ `docker run` を使った「Hello World」の実行  \n✅ 基本的なDockerコマンド（`run`、`ps`、`stop`、`rm`、`logs`、`images`、`rmi`、`build`）  \n✅ Dockerfile を使ってオリジナルのDockerイメージを作成  \n\n---\n\nこれで、Dockerの基礎はバッチリです！！ 🚀  \n次のステップとして、**Docker Compose** や **クラウドデプロイ** にも挑戦していきましょう。\n\n---\n","createdAt":"2025-05-19T08:50:58.370Z","updatedAt":"2025-06-02T05:29:48.958Z","publishedAt":"2025-06-02T05:29:48.971Z","docId":"d48cmaw54lczib71w1xxjeav","tags":[{"id":2,"documentId":"zigqvzb0flgfexglvu0rhcai","createdAt":"2025-05-19T09:42:02.161Z","updatedAt":"2025-05-19T09:42:02.161Z","publishedAt":"2025-05-19T09:42:02.189Z","name":"Docker"}],"thumbnail":[{"id":26,"documentId":"n9iejvg8eeq2rg2bezf23qox","name":"20250513-22.png","alternativeText":null,"caption":null,"width":1504,"height":844,"formats":{"thumbnail":{"name":"thumbnail_20250513-22.png","hash":"thumbnail_20250513_22_6c94d9b413","ext":".png","mime":"image/png","path":null,"width":245,"height":137,"size":14.08,"sizeInBytes":14080,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/thumbnail_20250513_22_6c94d9b413.png"},"small":{"name":"small_20250513-22.png","hash":"small_20250513_22_6c94d9b413","ext":".png","mime":"image/png","path":null,"width":500,"height":281,"size":34.55,"sizeInBytes":34545,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/small_20250513_22_6c94d9b413.png"},"medium":{"name":"medium_20250513-22.png","hash":"medium_20250513_22_6c94d9b413","ext":".png","mime":"image/png","path":null,"width":750,"height":421,"size":56.63,"sizeInBytes":56633,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/medium_20250513_22_6c94d9b413.png"},"large":{"name":"large_20250513-22.png","hash":"large_20250513_22_6c94d9b413","ext":".png","mime":"image/png","path":null,"width":1000,"height":561,"size":79.05,"sizeInBytes":79049,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/large_20250513_22_6c94d9b413.png"}},"hash":"20250513_22_6c94d9b413","ext":".png","mime":"image/png","size":22.6,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/20250513_22_6c94d9b413.png","previewUrl":null,"provider":"@strapi/provider-upload-aws-s3","provider_metadata":null,"createdAt":"2025-05-20T07:53:20.508Z","updatedAt":"2025-05-20T07:53:20.508Z","publishedAt":"2025-05-20T07:53:20.508Z"}]}},"__N_SSG":true}