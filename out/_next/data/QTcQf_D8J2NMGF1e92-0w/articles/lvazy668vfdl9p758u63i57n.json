{"pageProps":{"article":{"id":200,"documentId":"lvazy668vfdl9p758u63i57n","title":"同期処理におけるAWS Lambda関数タイムアウトのハンドリング検討","content":"# 背景\n\n弊社ではサーバーレスアーキテクチャを活用した開発を進めており、AWS Lambdaも多くのプロジェクトで利用しています。しかし、Lambda関数のタイムアウトが発生した場合のハンドリングが不十分で、サービスの一時的な停止や、顧客体験の低下に繋がる事例が発生しました。本記事では、Lambda関数のタイムアウトに対する適切なハンドリング方法を検討し、より信頼性の高いシステム構築を目指します。\n\n---\n\n# 検証概要\n\n1. **API Gateway + Lambda構成**\n    - クライアント(frontend)からのリクエスト時にタイムアウトするケースを想定し、ハンドリングを検討\n2. **Lambda関数から同期で他のLambda関数を実行**\n    - バックエンドでの実行時にタイムアウトするケースを想定し、ハンドリングを検討\n\n---\n\n## 検証1: API Gateway + Lambda構成\n\n### 再現するタイムアウトの設定\n\n以下のLambda関数を30秒のタイムアウト設定で実装しました。この関数は、45秒間スリープするため確実にタイムアウトが発生します。\n\n```python\nimport json\nimport time\n\ndef lambda_handler(event, context):\n    print('=====sleep start=====')\n    time.sleep(45)\n    print('=====sleep end=====')\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Hello from Lambda!')\n    }\n\n```\n\n### 実験内容\n\nこの関数をAPI Gatewayで `GET /time-out` エンドポイントとして公開し、以下のコマンドでリクエストを実行しました。\n\n```bash\ncurl https://your.domain/time-out -i\n\n```\n\n### 結果\n\nタイムアウトが発生した場合、以下のレスポンスが返ってきました。\n\n```bash\nHTTP/2 504 \ndate: Sat, 07 Dec 2024 12:51:53 GMT\ncontent-type: application/json\ncontent-length: 41\nx-amzn-requestid: de0b98ff-54cb-46af-acb3-d3d3f08dd189\nx-amzn-errortype: InternalServerErrorException\nx-amz-apigw-id: Ca-v-EJmoAMEpqw=\n\n{\"message\": \"Endpoint request timed out\"}\n```\n\n### クライアント側の対応策\n\nタイムアウトに対してクライアント側で考えられる対応策は以下の通りです。\n\n1. **リトライの実装**\n    \n    タイムアウトが一時的である可能性があるため、504エラー時にリトライを実施する。\n    \n2. **調査用情報の活用**\n    - `x-amzn-requestid` と `x-amz-apigw-id` を取得し、ログや通知システムに保存。これらの情報はCloudWatch Logsでの調査に役立つ。\n3. **アラート設定**\n    \n    頻繁にタイムアウトが発生する場合にはアラートを送信し、開発チームに早期対応を促す。\n    \n\n---\n\n## 検証2: Lambda関数から同期で他のLambda関数を実行\n\n### 呼び出し元関数\n\n以下の呼び出し元関数を1分のタイムアウト設定で実装しました。この関数から、タイムアウトが設定された別のLambda関数を同期的に実行します。\n\n```python\nimport json\nimport boto3\n\ndef lambda_handler(event, context):\n    lambda_client = boto3.client('lambda')\n    function_name = 'TimeOut'\n    response = lambda_client.invoke(FunctionName=function_name)\n\n    print('=====print response start=====')\n    print(response)\n    print('=====print response end=====')\n\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Hello from Lambda!')\n    }\n\n```\n\n### 実験結果\n\n呼び出し先のLambda関数がタイムアウトすると、以下のようなレスポンスが返りました。\n\n```python\n{\n  'ResponseMetadata': {\n    'RequestId': '36337419-d972-4d5b-b08e-b5f125859dcb',\n    'HTTPStatusCode': 200,\n    'HTTPHeaders': {\n      'x-amzn-requestid': '36337419-d972-4d5b-b08e-b5f125859dcb',\n      'x-amz-function-error': 'Unhandled',\n      'x-amzn-trace-id': 'Root=1-675449fe-3bb52bbf04bfa28c7dc64c26'\n    }\n  },\n  'FunctionError': 'Unhandled',\n  'Payload': {'errorMessage': 'Task timed out after 30.02 seconds'}\n}\n\n```\n\n### 呼び出し元の対応策\n\n1. **エラー情報のチェック**\n    \n    `FunctionError` の存在や `Payload` を解析し、タイムアウトが原因かを判断する。タイムアウトが原因の場合、リトライ処理を検討する。\n    \n2. **ログの活用**\n    - `x-amzn-requestid` をエラー情報として記録。呼び出し先関数のログ調査時に役立つ。\n    - `x-amzn-trace-id` を記録。X-Rayを活用したトレーシングでシステム全体の動作を追跡可能。\n3. **アラート設定**\n    \n    タイムアウトの頻度が高い場合、アラートを設定し、異常検知の迅速化を図る。\n    \n\n---\n\n# 結論\n\nAWS Lambdaのタイムアウト問題は、適切にハンドリングすることでシステムの信頼性を高めることができます。本記事で紹介した方法を参考に、以下のポイントを意識した対策を行いましょう。\n\n1. **リトライ戦略の実装**\n    \n    一時的な問題であれば、リトライで解決する場合があります。\n    \n2. **ログの充実化**\n    \n    調査に役立つリクエストIDやトレースIDをエラーログとして記録。\n    \n3. **アラートと通知**\n    \n    問題が発生した際には迅速に開発チームが対応できるような仕組みを構築。\n    \n4. **設計の見直し**\n    \n    タイムアウトの根本原因（処理時間が長すぎるなど）を分析し、コードやシステム構成の改善も検討する。\n    \n\nAWS Lambdaの柔軟性を活かしつつ、堅牢で信頼性の高いシステムを構築していきましょう。\n\n---\n\n","createdAt":"2025-05-19T08:50:57.746Z","updatedAt":"2025-06-01T23:54:20.067Z","publishedAt":"2025-06-01T23:54:20.081Z","docId":"d9jgock9fc3on7jzthp4yxpk","tags":[{"id":10,"documentId":"cxt2tbnsy05cazm17p3pp1a3","createdAt":"2025-05-19T09:46:58.860Z","updatedAt":"2025-05-19T09:46:58.860Z","publishedAt":"2025-05-19T09:46:58.868Z","name":"AWS"},{"id":12,"documentId":"c3lesvkdvjiq7y5zfx9mx0tu","createdAt":"2025-05-19T09:47:14.973Z","updatedAt":"2025-05-19T09:47:14.973Z","publishedAt":"2025-05-19T09:47:14.980Z","name":"Backend"}],"thumbnail":[{"id":16,"documentId":"be0v207b9pqnyvyu5b7xbxlm","name":"20250513-12.png","alternativeText":null,"caption":null,"width":1504,"height":844,"formats":{"thumbnail":{"name":"thumbnail_20250513-12.png","hash":"thumbnail_20250513_12_449ae1295c","ext":".png","mime":"image/png","path":null,"width":245,"height":137,"size":16.74,"sizeInBytes":16736,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/thumbnail_20250513_12_449ae1295c.png"},"small":{"name":"small_20250513-12.png","hash":"small_20250513_12_449ae1295c","ext":".png","mime":"image/png","path":null,"width":500,"height":281,"size":41.74,"sizeInBytes":41736,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/small_20250513_12_449ae1295c.png"},"large":{"name":"large_20250513-12.png","hash":"large_20250513_12_449ae1295c","ext":".png","mime":"image/png","path":null,"width":1000,"height":561,"size":97.46,"sizeInBytes":97462,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/large_20250513_12_449ae1295c.png"},"medium":{"name":"medium_20250513-12.png","hash":"medium_20250513_12_449ae1295c","ext":".png","mime":"image/png","path":null,"width":750,"height":421,"size":68.75,"sizeInBytes":68750,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/medium_20250513_12_449ae1295c.png"}},"hash":"20250513_12_449ae1295c","ext":".png","mime":"image/png","size":27.43,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/20250513_12_449ae1295c.png","previewUrl":null,"provider":"@strapi/provider-upload-aws-s3","provider_metadata":null,"createdAt":"2025-05-20T07:45:50.233Z","updatedAt":"2025-05-20T07:45:50.233Z","publishedAt":"2025-05-20T07:45:50.234Z"}]}},"__N_SSG":true}