{"pageProps":{"article":{"id":207,"documentId":"g8z0fn5ap0si8r1iheg2iwd7","title":"【PDF操作比較】pdfplumberでPDFからテキストも表も簡単抽出","content":"PDF操作ライブラリの比較検討記事の続きです。\n\n前回の記事はこちら\n\n- [【PDF操作比較】pypdfでPDFからテキスト抽出を行う方法](https://my-blog-frontend-jectjhrfq-raisex-hyamasakis-projects.vercel.app/articles/i402h46inwv9yzy1mgah101z)\n\nPDFファイルから**テキスト**や**表データ**を抽出する作業は、データ前処理において重要な役割を果たします。特に、**LLM（大規模言語モデル）のチューニング**や**RAG（Retrieval-Augmented Generation）の文書前処理**では、PDFデータの扱いやすさが効率を左右します。\n\n今回ご紹介するのは、Pythonライブラリの**pdfplumber**を使ったテキストと表データの抽出方法です。このライブラリは、テキストだけでなく複雑な表形式データにも対応しており、非常に便利です！\n\n---\n\n## pdfplumberの概要\n\n**pdfplumber**は、PDFから以下のようなデータを簡単に抽出できるライブラリです：\n\n- テキスト\n- 表（表形式データ）\n- 画像や図\n\n---\n\n# pdfplumberの基本的な使い方\n\n以下では、**テキスト抽出**と**表抽出**の方法をそれぞれ紹介します。\n\nPDFは前回の記事で使ったものと同じものを使います。\n\n---\n\n## テキストの抽出\n\n### 必要な準備\n\nまずは、pdfplumberをインストールします。\n\n```bash\npip install pdfplumber\n```\n\n### テキスト抽出のコード例\n\n以下のコードを使えば、PDFからテキストを抽出してファイルに保存できます。\n\n```python\nimport os\nimport pdfplumber\n\ninput_pdf_path = \"./docs/読み取りテスト文書.pdf\"\noutput_txt_path = \"./output/text_extract.txt\"\n\ndef extract_text_with_pdfplumber(input_path, output_path):\n    try:\n        with pdfplumber.open(input_path) as pdf:\n            extracted_text = \"\"\n\n            for page in pdf.pages:\n                extracted_text += page.extract_text()\n\n        output_dir = os.path.dirname(output_path)\n        if not os.path.exists(output_dir):\n            os.makedirs(output_dir)\n\n        with open(output_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(extracted_text)\n\n        print(f\"テキストが正常に抽出され、以下のファイルに保存されました: {output_path}\")\n    except Exception as e:\n        print(f\"エラーが発生しました: {e}\")\n\nif __name__ == \"__main__\":\n    extract_text_with_pdfplumber(input_pdf_path, output_txt_path)\n\n```\n\n### 実行方法\n\nコードを `text_extract.py` というファイル名で保存し、以下のコマンドで実行します：\n\n```bash\npython3 text_extract.py\n```\n\n### 結果\n\n実際にPDFから抽出したテキストは以下のようになります：\n\n```\n文書のタイトル\n見出し 1\n見出し 1-1\nここには見出し1-1の本文が入ります。ここには見出し1-1の本文が入ります。ここには見\n出し1-1の本文が入ります。ここには見出し1-1の本文が入ります。ここには見出し1-1の\n本文が入ります。ここには見出し1-1の本文が入ります。ここには見出し1-1の本文が入り\nます。ここには見出し1-1の本文が入ります。ここには見出し1-1の本文が入ります。ここ\nには見出し1-1の本文が入ります。ここには見出し1-1の本文が入ります。\n見出し 1-2\nここには見出し1-2の本文が入ります。ここには見出し1-2の本文が入ります。ここには見\n出し1-2の本文が入ります。ここには見出し1-2の本文が入ります。ここには見出し1-2の\n本文が入ります。ここには見出し1-2の本文が入ります。ここには見出し1-2の本文が入り\nます。\nここには見出し1-2の本文が入ります。ここには見出し1-2の本文が入ります。\n1ここには見出し1-2の本文が入ります。ここには見出し1-2の本文が入ります。\n見出し 1-3\nここには見出し1-3の本文が入ります。ここには見出し1-3の本文が入ります。\nここには見出し1-3の本文が入ります。ここには見出し1-3の本文が入ります。ここには見\n出し1-3の本文が入ります。ここには見出し1-3の本文が入ります。ここには見出し1-3の\n本文が入ります。ここには見出し1-3の本文が入ります。\n2列1 列2 列3 列4\n行1列1の本文が入 行1列2の本文が入 行1列3の本文が入 行1列4の本文が入\nります。 ります。 ります。 ります。\n行2列1の本文が入 行2列2の本文が入 行2列3の本文が入 行2列4の本文が入\nります。 ります。 ります。 ります。\n行3列1の本文が入 行3列2の本文が入 行3列3の本文が入 行3列4の本文が入\nります。 ります。 ります。 ります。\n表1. 表1の名前が入ります。\n列1 列2 列3 列4\n行 1列 1の本文が 行1列 2の本文が 行1列 3の本文が 行1列 4の本文が\n入ります。 入ります。 入ります。 入ります。\n行 2列 1の本文が 行2列 2の本文が 行2列 3の本文が 行2列 4の本文が\n入ります。 入ります。 入ります。 入ります。\n表2. 表2の名前が入ります。\n見出し 1-4\nここには見出し1-4の本文が入ります。ここには見出し1-4の本文が入ります。ここには見\n3出し1-4の本文が入ります。ここには見出し1-4の本文が入ります。ここには見出し1-4の\n本文が入ります。ここには見出し1-4の本文が入ります。ここには見出し1-4の本文が入り\nます。ここには見出し1-4の本文が入ります。ここには見出し1-4の本文が入ります。ここ\nには見出し1-4の本文が入ります。\n4見出し 2\n(項目名が入ります)\n見出し 2-1\nここには見出し2-1の本文が入ります。ここには見出し2-1の本文が入り\nます。ここには見出し2-1の本文が入ります。ここには見出し2-1の本文が入ります。ここ\nには見出し2-1の本文が入ります。ここには見出し2-1の本文が入ります。ここには見出し\n2-1の本文が入ります。ここには見出し2-1の本文が入ります。\n(項目名が入ります)\n見出し 2-2\nここには見出し2-2の本文が入ります。ここには見出し2-2の本文が入り\nます。ここには見出し2-2の本文が入ります。ここには見出し2-2の本文が入ります。ここ\nには見出し2-2の本文が入ります。ここには見出し2-2の本文が入ります。ここには見出し\n2-2の本文が入ります。\nここには見出し2-2の本文が入ります。\n以上\n5\n```\n\nこのように、PDFのレイアウトに沿ったテキストが抽出されます。\n\n---\n\n## 表の抽出\n\npdfplumberでは表の内容をリスト形式で取り出せるため、後続処理が簡単です。\n\n### 表抽出のコード例\n\n次のコードは、PDFから表を抽出し、タブ区切り形式でファイルに保存する例です。\n\n```python\nimport os\nimport pdfplumber\n\ninput_pdf_path = \"./docs/読み取りテスト文書.pdf\"\noutput_txt_path = \"./output/table_extract.txt\"\n\ndef extract_tables_with_pdfplumber(input_path, output_path):\n    try:\n        with pdfplumber.open(input_path) as pdf:\n            extracted_table = \"\"\n\n            for i, page in enumerate(pdf.pages, start=1):\n                tables = page.extract_tables()\n                if tables:\n                    for table in tables:\n                        for row in table:\n                            extracted_table += \"\\t\".join(row) + \"\\n\"\n                        extracted_table += \"\\n\"  # テーブル間に空行を追加\n\n        output_dir = os.path.dirname(output_path)\n        if not os.path.exists(output_dir):\n            os.makedirs(output_dir)\n\n        with open(output_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(extracted_table)\n\n        print(f\"テーブルデータが正常に抽出され、以下のファイルに保存されました: {output_path}\")\n    except Exception as e:\n        print(f\"エラーが発生しました: {e}\")\n\n# 実行\nif __name__ == \"__main__\":\n    extract_tables_with_pdfplumber(input_pdf_path, output_txt_path)\n\n```\n\n### 実行方法\n\nコードを `table_extract.py` として保存し、以下のコマンドで実行します：\n\n```bash\npython3 table_extract.py\n```\n\n### 結果\n\n抽出した表の例：\n\n```\n列1\t列2\t列3\t列4\n行1列1の本文が入\nります。\t行1列2の本文が入\nります。\t行1列3の本文が入\nります。\t行1列4の本文が入\nります。\n行2列1の本文が入\nります。\t行2列2の本文が入\nります。\t行2列3の本文が入\nります。\t行2列4の本文が入\nります。\n行3列1の本文が入\nります。\t行3列2の本文が入\nります。\t行3列3の本文が入\nります。\t行3列4の本文が入\nります。\n\n列1\t列2\t列3\t列4\n行 1列 1の本文が\n入ります。\t行1列 2の本文が\n入ります。\t行1列 3の本文が\n入ります。\t行1列 4の本文が\n入ります。\n行 2列 1の本文が\n入ります。\t行2列 2の本文が\n入ります。\t行2列 3の本文が\n入ります。\t行2列 4の本文が\n入ります。\n\n```\n\nこのように、PDFの表が整った形式で抽出されます。\n\n---\n\n### 3. 抽出データの後処理\n\npdfplumberで抽出した表データは、リスト形式で取得されます。このデータをさらに加工する場合、**pandas**を活用すると便利です。\n\n### PandasでのExcel出力例\n\n```python\nimport pandas as pd\n\n# 抽出した表データをリスト形式にする（例）\ndata = [\n    [\"列1\", \"列2\", \"列3\", \"列4\"],\n    [\"行1列1\", \"行1列2\", \"行1列3\", \"行1列4\"],\n    [\"行2列1\", \"行2列2\", \"行2列3\", \"行2列4\"]\n]\n\n# データフレームとして作成\ndf = pd.DataFrame(data[1:], columns=data[0])\n\n# Excelファイルとして保存\ndf.to_excel(\"./output/extracted_table.xlsx\", index=False)\nprint(\"表データがExcelファイルに保存されました！\")\n\n```\n\n---\n\n## pdfplumberの活用ポイント\n\n1. **テキスト抽出に加え、表データも簡単に処理可能**。\n2. **後続処理との組み合わせが簡単**（例：pandasでExcel出力）。\n3. **複雑なレイアウトでも精度高く抽出**。\n\n---\n\nこれで、PDFからテキストや表を抽出する方法はバッチリです！ぜひ、pdfplumberを使って、プロジェクトの効率化に役立ててください。\n\n次はPyMuPDFのライブラリについても調べていきます。更新をお楽しみに！\n\n---\n\n","createdAt":"2025-05-19T08:50:58.120Z","updatedAt":"2025-06-02T00:22:22.052Z","publishedAt":"2025-06-02T00:22:22.083Z","docId":"jqd87p72n6wi5tl8ozlslk1c","tags":[{"id":20,"documentId":"fbllyhmskvu2l7wbg5dzpkri","createdAt":"2025-05-19T09:48:50.341Z","updatedAt":"2025-05-19T09:48:50.341Z","publishedAt":"2025-05-19T09:48:50.348Z","name":"LLM"},{"id":22,"documentId":"enpfq0z697dadtxijwpwwrsv","createdAt":"2025-05-19T09:49:17.862Z","updatedAt":"2025-05-19T09:49:17.862Z","publishedAt":"2025-05-19T09:49:17.870Z","name":"Python"},{"id":24,"documentId":"l1dya7wtq2ct0n1dxm41pl7j","createdAt":"2025-05-19T09:49:40.953Z","updatedAt":"2025-05-19T09:49:40.953Z","publishedAt":"2025-05-19T09:49:40.961Z","name":"RAG"},{"id":30,"documentId":"d99cu6c3t9hgwynppb92lhph","createdAt":"2025-05-19T09:50:59.080Z","updatedAt":"2025-05-19T09:50:59.080Z","publishedAt":"2025-05-19T09:50:59.086Z","name":"生成AI"}],"thumbnail":[{"id":22,"documentId":"ij9nja1kx09vm7wy95yn20di","name":"20250513-18.png","alternativeText":null,"caption":null,"width":1504,"height":844,"formats":{"thumbnail":{"name":"thumbnail_20250513-18.png","hash":"thumbnail_20250513_18_7f8d875b8b","ext":".png","mime":"image/png","path":null,"width":245,"height":137,"size":16.11,"sizeInBytes":16105,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/thumbnail_20250513_18_7f8d875b8b.png"},"medium":{"name":"medium_20250513-18.png","hash":"medium_20250513_18_7f8d875b8b","ext":".png","mime":"image/png","path":null,"width":750,"height":421,"size":62.76,"sizeInBytes":62757,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/medium_20250513_18_7f8d875b8b.png"},"small":{"name":"small_20250513-18.png","hash":"small_20250513_18_7f8d875b8b","ext":".png","mime":"image/png","path":null,"width":500,"height":281,"size":39.22,"sizeInBytes":39220,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/small_20250513_18_7f8d875b8b.png"},"large":{"name":"large_20250513-18.png","hash":"large_20250513_18_7f8d875b8b","ext":".png","mime":"image/png","path":null,"width":1000,"height":561,"size":86.16,"sizeInBytes":86156,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/large_20250513_18_7f8d875b8b.png"}},"hash":"20250513_18_7f8d875b8b","ext":".png","mime":"image/png","size":22.86,"url":"https://stg-raisex-tech-blog.s3.ap-northeast-1.amazonaws.com/20250513_18_7f8d875b8b.png","previewUrl":null,"provider":"@strapi/provider-upload-aws-s3","provider_metadata":null,"createdAt":"2025-05-20T07:49:35.401Z","updatedAt":"2025-05-20T07:49:35.401Z","publishedAt":"2025-05-20T07:49:35.401Z"}]}},"__N_SSG":true}